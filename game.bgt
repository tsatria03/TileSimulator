#include"includes/includes.bgt"
string[] dock, dock2;
string docksplit, changesplit;
file docks, docks2, opt;
dynamic_menu_pro m;
sound_pool pool;
text_input input;
virtualizer v;
void main()
{
if(!screen_reader_set_library_path(NVDA,"lib/nvdaControllerClient32.dll"))
{
alert("Error", "There was a problem interacting with the NVDA screen reader.");
exit();
}
show_game_window("game");
mainmenu();
}
void restart()
{
if(SCRIPT_COMPILED)
{
run("game.exe","",false,false);
}
else
{
run("C:\\Program Files (x86)\\BGT\\bgt.exe","game.bgt",false,false);
}
}
void volume_scroll_down()
{
if(volumeadjust==1 and tilevolume!=-50 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
speak(tilevolume/1+49+"percent");
tilevolume-=1;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
tilevolume-=1;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
effectstimer.restart();
}
}
}
void volume_scroll_up()
{
if(volumeadjust==1 and tilevolume!=0 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
speak(tilevolume/1+51+"percent");
tilevolume+=1;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
tilevolume+=1;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
effectstimer.restart();
}
}
}
void volume_step_down()
{
if(volumeadjust==1 and tilevolume!=-50)
{
if(spokenvalues==1)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
speak(tilevolume/1+45+"percent");
tilevolume-=5;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
else if(spokenvalues==0)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
tilevolume-=5;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
}
}
void volume_step_up()
{
if(volumeadjust==1 and tilevolume!=0)
{
if(spokenvalues==1)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
speak(tilevolume/1+55+"percent");
tilevolume+=5;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
else if(spokenvalues==0)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
tilevolume+=5;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
}
}
void pitch_scroll_down()
{
if(pitchadjust==1 and tilepitch!=0 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
speak(tilepitch/2-1+"percent");
tilepitch-=2;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
tilepitch-=2;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
effectstimer.restart();
}
}
}
void pitch_scroll_up()
{
if(pitchadjust==1 and tilepitch!=200 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
speak(tilepitch/2+1+"percent");
tilepitch+=2;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
tilepitch+=2;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
effectstimer.restart();
}
}
}
void pitch_step_down()
{
if(pitchadjust==1 and tilepitch!=0)
{
if(spokenvalues==1)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
speak(tilepitch/2-5+"percent");
tilepitch-=10;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
else if(spokenvalues==0)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
tilepitch-=10;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
}
}
void pitch_step_up()
{
if(pitchadjust==1 and tilepitch!=200)
{
if(spokenvalues==1)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
speak(tilepitch/2+5+"percent");
tilepitch+=10;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
else if(spokenvalues==0)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
tilepitch+=10;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
}
}
void pan_scroll_down()
{
if(panadjust==1 and tilepan!=-50 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
speak(tilepan/1+49+"percent");
tilepan-=1;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
tilepan-=1;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
effectstimer.restart();
}
}
}
void pan_scroll_up()
{
if(panadjust==1 and tilepan!=50 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
speak(tilepan/1+51+"percent");
tilepan+=1;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
tilepan+=1;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
effectstimer.restart();
}
}
}
void pan_step_down()
{
if(panadjust==1 and tilepan!=-50)
{
if(spokenvalues==1)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
speak(tilepan/1+45+"percent");
tilepan-=5;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
else if(spokenvalues==0)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
tilepan-=5;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
}
}
void pan_step_up()
{
if(panadjust==1 and tilepan!=50)
{
if(spokenvalues==1)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
speak(tilepan/1+55+"percent");
tilepan+=5;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
else if(spokenvalues==0)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,tilepan,tilevolume,tilepitch);
tilepan+=5;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
}
}
void reset_volume()
{
if(tilevolume==0 and resetvolume==1)
{
speak("Volume is already reset.");
}
else if(tilevolume<=0 and resetvolume==1)
{
speak("volume reset");
tilevolume=0;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
}
void reset_pan()
{
if(tilepan==0 and resetpan==1)
{
speak("Pan is already reset.");
}
else if(tilepan<=50 and resetpan==1)
{
speak("pan reset");
tilepan=0;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
}
void reset_pitch()
{
if(tilepitch==100 and resetpitch==1)
{
speak("Pitch is already reset");
}
else if(tilepitch<=200 and resetpitch==1)
{
speak("pitch reset");
tilepitch=100;
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
}
