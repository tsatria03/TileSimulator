void mainmenu()
{
setupmenu(true);
m.add_item_tts("documentation menu", "help");
m.add_item_tts("game menu", "step");
m.add_item_tts("settings menu", "settings");
m.add_item_tts("test speakers", "st");
m.add_item_tts("restart", "rx");
m.add_item_tts("exit", "ex");
int mres=m.run("Main menu. Please choose an option with your arrow keys, then press enter to activate one.",true);
string main=m.get_item_name(mres);
if(mres==0)
{
speak("exiting");
if(menumusic==1) m.fade_music(20);
if(menumusic==0) wait(500);
exit();
}
if(main=="step")
{
gamemenu();
}
if(main=="help")
{
docksmenu();
}
if(main=="st")
{
if(menumusic==1) m.fade_music(20);
if(menumusic==0) wait(500);
dlgplay("sounds/misc/speakertest.ogg", true, true, 30);
mainmenu();
}
if(main=="ex")
{
speak("exiting");
if(menumusic==1) m.fade_music(20);
if(menumusic==0) wait(500);
exit();
}
if(main=="rx")
{
speak("restarting");
if(menumusic==1) m.fade_music(20);
if(menumusic==0) wait(500);
restart();
}
if(main=="settings")
{
settingsmenu();
}
}
void docksmenu()
{
setupmenu(true);
m.add_item_tts("changelog", "changelog");
m.add_item_tts("readme", "readme");
m.add_item_tts("back", "back");
int mres=m.run("documentation menu",true);
string dnm=m.get_item_name(mres);
if(mres==0)
{
mainmenu();
}
if(dnm=="changelog")
{
docks.open("docks/changelog.txt","r");
changesplit=docks.read();
dock=string_split(changesplit,"\r\n",false);
setupmenu2(true);
for(uint i=0; i<dock.length(); i++)
{
m.add_item_tts(dock[i],"","",false);
}
int mres=m.run("Changelog", true);
if (mres==0 and mres>=dock.length())
{
return;
}
if (mres>0 and mres<=dock.length())
{
return;
}
}
if(dnm=="readme")
{
docks2.open("docks/readme.txt", "r");
docksplit=docks2.read();
dock2=string_split(docksplit,"\r\n",false);
setupmenu2(true);
for(uint i=0; i<dock2.length(); i++)
{
m.add_item_tts(dock2[i],"","",false);
}
int mres=m.run("Readme", true);
if (mres==0 and mres>=dock2.length())
{
return;
}
if (mres>0 and mres<=dock2.length())
{
return;
}
}
if(dnm=="back")
{
mainmenu();
}
}
void settingsmenu()
{
setupmenu(true);
m.add_item_tts("select menu sounds", "slm");
if(menumusic==0)
m.add_item_tts("enable music in menus", "mtn");
else
m.add_item_tts("disable music in menus", "mtn");
if(up_down==0)
m.add_item_tts("enable up and down in menus", "pd");
else
m.add_item_tts("disable up and down in menus", "pd");
if(left_right==0)
m.add_item_tts("enable left and right in menus", "lr");
else
m.add_item_tts("disable left and right in menus", "lr");
if(home_end==0)
m.add_item_tts("enable home and end in menus", "hd");
else
m.add_item_tts("disable home and end in menus", "hd");
if(wrap==0)
m.add_item_tts("enable wrapping in menus", "rg");
else
m.add_item_tts("disable wrapping in menus", "rg");
if(repeat_items==0)
m.add_item_tts("enable repeating items in menus", "rms");
else
m.add_item_tts("disable repeating items in menus", "rms");
if(numbers==0)
m.add_item_tts("enable number scrolling in menus", "nbs");
else
m.add_item_tts("disable number scrolling in menus", "nbs");
if(first_letter==0)
m.add_item_tts("enable first letter scrolling in menus", "fls");
else
m.add_item_tts("disable first letter scrolling in menus", "fls");
if(position_info==0)
m.add_item_tts("enable position information in menus", "psn");
else
m.add_item_tts("disable position information in menus", "psn");
if(side_scroll==0)
m.add_item_tts("enable side scrolling in menus", "psl");
else
m.add_item_tts("disable side scrolling in menus", "psl");
m.add_item_tts("back", "back");
int mres=m.run("settings menu",true);
string ssm=m.get_item_name(mres);
if(mres==0)
{
mainmenu();
}
if(ssm=="slm")
{
menusounds();
}
if(ssm=="mtn")
{
if(menumusic==0)
{
m.stop_music();
m.music.volume=0;
menumusic=1;
speak("music in menus enabled");
}
else
{
m.music.volume=-100;
menumusic=0;
speak("music in menus disabled");
}
settingsmenu();
}
if(ssm=="pd")
{
if(up_down==0)
{
up_down=1;
speak("up and down in menus enabled");
}
else
{
m.enable_up_and_down=false;
up_down=0;
speak("up and down in menus disabled");
}
settingsmenu();
}
if(ssm=="lr")
{
if(left_right==0)
{
left_right=1;
speak("left and right in menus enabled");
}
else
{
m.enable_left_and_right=false;
left_right=0;
speak("left and right in menus disabled");
}
settingsmenu();
}
if(ssm=="hd")
{
if(home_end==0)
{
home_end=1;
speak("home and end in menus enabled");
}
else
{
m.enable_home_and_end=false;
home_end=0;
speak("home and end in menus disabled");
}
settingsmenu();
}
if(ssm=="rg")
{
if(wrap==0)
{
wrap=1;
speak("wrapping in menus enabled");
}
else
{
m.wrap=false;
wrap=0;
speak("wrapping in menus disabled");
}
settingsmenu();
}
if(ssm=="rms")
{
if(repeat_items==0)
{
repeat_items=1;
speak("repeating items in menus enabled");
}
else
{
m.repeat_items_at_edges=false;
repeat_items=0;
speak("repeating items in menus disabled");
}
settingsmenu();
}
if(ssm=="nbs")
{
if(numbers==0)
{
numbers=1;
speak("number scrolling in menus enabled");
}
else
{
m.enable_numbers=false;
numbers=0;
speak("number scrolling in menus disabled");
}
settingsmenu();
}
if(ssm=="fls")
{
if(first_letter==0)
{
first_letter=1;
speak("first letter scrolling in menus enabled");
}
else
{
m.enable_first_letter_navigation=false;
first_letter=0;
speak("first letter scrolling in menus disabled");
}
settingsmenu();
}
if(ssm=="psn")
{
if(position_info==0)
{
position_info=1;
speak("position info in menus enabled");
}
else
{
m.speak_position_information=false;
position_info=0;
speak("position info in menus disabled");
}
settingsmenu();
}
if(ssm=="psl")
{
if(side_scroll==0)
{
side_scroll=1;
speak("side scrolling in menus enabled");
}
else
{
m.enable_side_scrolling=false;
side_scroll=0;
speak("side scrolling in menus disabled");
}
settingsmenu();
}
if(ssm=="back")
{
mainmenu();
}
}
void menusounds()
{
setupmenu(true);
m.add_item_tts("click sound,"+"currently set to;"+clicksound, "mcs");
m.add_item_tts("edge sound,"+"currently set to;"+edgesound, "mds");
m.add_item_tts("enter sound,"+"currently set to;"+entersound, "mrs");
m.add_item_tts("open sound,"+"currently set to;"+opensound, "mps");
m.add_item_tts("wrap sound,"+"currently set to;"+wrapsound, "mws");
m.add_item_tts("back", "back");
int mres=m.run("Choose the sounds you would like to use in all menus.",true);
string scm=m.get_item_name(mres);
if(mres==0)
{
settingsmenu();
}
if(scm=="mcs")
{
string res=clicksmenu();
if(res!="")
{
clicksound=res;
}
}
if(scm=="mds")
{
string res=edgesmenu();
if(res!="")
{
edgesound=res;
}
}
if(scm=="mrs")
{
string res=entersmenu();
if(res!="")
{
entersound=res;
}
}
if(scm=="mps")
{
string res=opensmenu();
if(res!="")
{
opensound=res;
}
}
if(scm=="mws")
{
string res=wrapsmenu();
if(res!="")
{
wrapsound=res;
}
}
if(scm=="back")
{
settingsmenu();
}
}
void gamemenu()
{
setupmenu(true);
m.add_item_tts("play", "step");
m.add_item_tts("settings", "set");
m.add_item_tts("back", "back");
int mres=m.run("game menu",true);
string gamem=m.get_item_name(mres);
if(mres==0)
{
mainmenu();
}
if(gamem=="step")
{
if(menumusic==1) m.fade_music(20);
tilesim();
}
if(gamem=="set")
{
gamepreffs();
}
if(gamem=="back")
{
mainmenu();
}
}
void gamepreffs()
{
setupmenu(true);
m.add_item_tts("Set default walkspeed", "ws");
m.add_item_tts("back", "back");
int mres=m.run("Game options",true);
string gamepm=m.get_item_name(mres);
if(mres==0)
{
gamemenu();
}
if(gamepm=="ws")
{
string walkspeed=input.input("What would you like your default walkspeed to be set to?","200");
if(keytime=="")
gamepreffs();
keytime=string_to_number(walkspeed);
}
if(gamepm=="back")
{
gamemenu();
}
}
