void tilesim()
{
while(true)
{
wait(5);
if(key_pressed(KEY_O))
{
if(moveable==false and sitting==true)
{
speak("You must be standing in order to open the objects menu.");
}
else if(moveable==true and sitting==false)
{
pool.destroy_all();
objmenu();
}
}
if(key_pressed(KEY_M))
{
if(moveable==false and sitting==true)
{
speak("You must be standing in order to open the cheats menu.");
}
else if(moveable==true and sitting==false)
{
pool.destroy_all();
cheatsmenu();
}
}
if(key_down(KEY_E))
{
volume_scroll_up();
}
if(key_down(KEY_Q))
{
volume_scroll_down();
}
if (key_pressed(KEY_S))
{
volume_step_down();
}
if (key_pressed(KEY_W))
{
volume_step_up();
}
if(key_down(KEY_K))
{
pitch_scroll_down();
}
if(key_down(KEY_I))
{
pitch_scroll_up();
}
if(key_pressed(KEY_F))
{
pitch_step_down();
}
if(key_pressed(KEY_J))
{
pitch_step_up();
}
if (key_down(KEY_A))
{
pan_scroll_down();
}
if (key_down(KEY_D))
{
pan_scroll_up();
}
if (key_pressed(KEY_Z))
{
pan_step_down();
}
if (key_pressed(KEY_C))
{
pan_step_up();
}
if(key_pressed(KEY_V) and spokenvolume==1)
{
speak("tile volume,"+round(tilevolume+60/tilemaxvolume*100,2)+"percent");
}
if(key_pressed(KEY_N) and spokenpan==1)
{
speak("tile pan,"+round(tilepan+50/tilemaxpan*100,2)+"percent");
}
if(key_pressed(KEY_H) and spokenpitch==1)
{
speak("tile pitch,"+round(tilepitch/tilemaxpitch*100,2)+"percent");
}
if(key_pressed(KEY_L))
{
reset_volume();
}
if(key_pressed(KEY_P))
{
reset_pan();
}
if(key_pressed(KEY_T))
{
reset_pitch();
}
if(key_down(KEY_LMENU) and key_up(KEY_G) or key_down(KEY_RMENU) and key_up(KEY_G))
{
if(key_down(KEY_LEFT))
{
rotate_left();
}
if(key_down(KEY_RIGHT))
{
rotate_right();
}
if(key_pressed(KEY_LEFT))
{
turn_left();
}
if(key_pressed(KEY_RIGHT))
{
turn_right();
}
}
if(key_down(KEY_G) and key_up(KEY_SPACE) and key_up(KEY_LMENU) and key_up(KEY_RMENU))
{
if(cammable==true)
{
if(cleft.pressing())
{
if(degrees==0 and direction=="north")
{
move_camera_left();
}
else if(degrees==180 and direction=="south")
{
move_camera_right();
}
else if(degrees==90 and direction=="east")
{
move_camera_backward();
}
else if(degrees==270 and direction=="west")
{
move_camera_forward();
}
}
if(cright.pressing())
{
if(degrees==0 and direction=="north")
{
move_camera_right();
}
else if(degrees==180 and direction=="south")
{
move_camera_left();
}
else if(degrees==90 and direction=="east")
{
move_camera_forward();
}
else if(degrees==270 and direction=="west")
{
move_camera_backward();
}
}
if(cdown.pressing())
{
if(degrees==0 and direction=="north")
{
move_camera_backward();
}
else if(degrees==180 and direction=="south")
{
move_camera_forward();
}
else if(degrees==90 and direction=="east")
{
move_camera_left();
}
else if(degrees==270 and direction=="west")
{
move_camera_right();
}
}
if(cup.pressing())
{
if(degrees==0 and direction=="north")
{
move_camera_forward();
}
else if(degrees==180 and direction=="south")
{
move_camera_backward();
}
else if(degrees==90 and direction=="east")
{
move_camera_right();
}
else if(degrees==270 and direction=="west")
{
move_camera_left();
}
}
if(key_pressed(KEY_LEFT))
{
if(degrees==0 and direction=="north")
{
step_camera_left();
}
else if(degrees==180 and direction=="south")
{
step_camera_right();
}
else if(degrees==90 and direction=="east")
{
step_camera_backward();
}
else if(degrees==270 and direction=="west")
{
step_camera_forward();
}
}
if(key_pressed(KEY_RIGHT))
{
if(degrees==0 and direction=="north")
{
step_camera_right();
}
else if(degrees==180 and direction=="south")
{
step_camera_left();
}
else if(degrees==90 and direction=="east")
{
step_camera_forward();
}
else if(degrees==270 and direction=="west")
{
step_camera_backward();
}
}
if(key_pressed(KEY_DOWN))
{
if(degrees==0 and direction=="north")
{
step_camera_backward();
}
else if(degrees==180 and direction=="south")
{
step_camera_forward();
}
else if(degrees==90 and direction=="east")
{
step_camera_left();
}
else if(degrees==270 and direction=="west")
{
step_camera_right();
}
}
if(key_pressed(KEY_UP))
{
if(degrees==0 and direction=="north")
{
step_camera_forward();
}
else if(degrees==180 and direction=="south")
{
step_camera_backward();
}
else if(degrees==90 and direction=="east")
{
step_camera_right();
}
else if(degrees==270 and direction=="west")
{
step_camera_left();
}
}
}
}
if(key_up(KEY_G) and key_up(KEY_SPACE) and key_up(KEY_LMENU) and key_up(KEY_RMENU))
{
if(cameraminx<=minx)
{
cameraminx=minx;
}
if(cameraminx>=minx)
{
cameraminx=minx;
}
if(cameramaxx<=maxx)
{
cameramaxx=maxx;
}
if(cameramaxx>=maxx)
{
cameramaxx=maxx;
}
if(cameraminy<=miny)
{
cameraminy=miny;
}
if(cameraminy>=miny)
{
cameraminy=miny;
}
if(cameramaxy<=maxy)
{
cameramaxy=maxy;
}
if(cameramaxy>=maxy)
{
cameramaxy=maxy;
}
}
if (key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL))
{
movetime=runtime;
}
else
{
movetime=walktime;
}
if(key_pressed(KEY_B))
{
if(key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL)) reset_all_forced_keys();
else force_key_down(KEY_LCONTROL);
speak("auto running;"+(key_down(KEY_LCONTROL)?"enabled.":"disabled."));
}
if(key_pressed(KEY_Y))
{
if(key_down(KEY_G)) reset_all_forced_keys();
else force_key_down(KEY_G);
speak("Dexterity Camera;"+(key_down(KEY_G)?"enabled.":"disabled."));
}
if(key_pressed(KEY_GRAVE))
{
if(platatile!=1)
{
speak("tiles are already reset");
}
else if(platatile!=0)
{
speak("tiles reset");
platatile=0;
platbtile=0;
platctile=0;
platdtile=0;
platetile=0;
platftile=0;
platgtile=0;
plathtile=0;
platitile=0;
platile1="carpet";
platile2="carpet";
platile3="carpet";
platile4="carpet";
platile5="carpet";
platile6="carpet";
platile7="carpet";
platile8="carpet";
platile9="carpet";
walltile1="metal15";
walltile2="metal15";
walltile3="metal15";
walltile4="metal15";
walltile5="metal15";
walltile6="metal15";
walltile7="metal15";
walltile8="metal15";
walltile9="metal15";
}
}
if(key_pressed(KEY_1))
{
if(spokentoggle==1)
{
if(platatile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
speak("Tile1 muted");
platatile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
speak("Tile1 unmuted");
platatile=1;
}
}
else if(spokentoggle==0)
{
if(platatile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
platatile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
platatile=1;
}
}
}
if(key_pressed(KEY_2))
{
if(spokentoggle==1)
{
if(platbtile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
speak("Tile2 muted");
platbtile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
speak("Tile2 unmuted");
platbtile=1;
}
}
else if(spokentoggle==0)
{
if(platbtile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
platbtile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
platbtile=1;
}
}
}
if(key_pressed(KEY_3))
{
if(spokentoggle==1)
{
if(platctile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
speak("Tile3 muted");
platctile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
speak("Tile3 unmuted");
platctile=1;
}
}
else if(spokentoggle==0)
{
if(platctile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
platctile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
platctile=1;
}
}
}
if(key_pressed(KEY_4))
{
if(spokentoggle==1)
{
if(platdtile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
speak("Tile4 muted");
platdtile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
speak("Tile4 unmuted");
platdtile=1;
}
}
else if(spokentoggle==0)
{
if(platdtile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
platdtile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
platdtile=1;
}
}
}
if(key_pressed(KEY_5))
{
if(spokentoggle==1)
{
if(platetile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
speak("Tile5 muted");
platetile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
speak("Tile5 unmuted");
platetile=1;
}
}
else if(spokentoggle==0)
{
if(platetile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
platetile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
platetile=1;
}
}
}
if(key_pressed(KEY_6))
{
if(spokentoggle==1)
{
if(platftile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
speak("Tile6 muted");
platftile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
speak("Tile6 unmuted");
platftile=1;
}
}
else if(spokentoggle==0)
{
if(platftile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
platftile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
platftile=1;
}
}
}
if(key_pressed(KEY_7))
{
if(spokentoggle==1)
{
if(platgtile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
speak("Tile7 muted");
platgtile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
speak("Tile7 unmuted");
platgtile=1;
}
}
else if(spokentoggle==0)
{
if(platgtile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
platgtile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
platgtile=1;
}
}
}
if(key_pressed(KEY_8))
{
if(spokentoggle==1)
{
if(plathtile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
speak("Tile8 muted");
plathtile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
speak("Tile8 unmuted");
plathtile=1;
}
}
else if(spokentoggle==0)
{
if(plathtile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
plathtile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
plathtile=1;
}
}
}
if(key_pressed(KEY_9))
{
if(spokentoggle==1)
{
if(platitile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
speak("Tile9 muted");
platitile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
speak("Tile9 unmuted");
platitile=1;
}
}
else if(spokentoggle==0)
{
if(platitile==1)
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleoff.ogg",false);
platitile=0;
}
else
{
if(togglesound==1) pool.play_stationary("sounds/misc/toggleon.ogg",false);
platitile=1;
}
}
}
if(key_pressed(KEY_SEMICOLON))
{
speak("Your maximum jump height is"+jumpheight+"squares");
}
if(key_pressed(KEY_APOSTROPHE))
{
speak("You are at speed"+modspeed);
}
if (key_down(KEY_LEFT) and movetimer.elapsed>=movetime and key_up(KEY_LMENU) and key_up(KEY_RMENU) and key_up(KEY_G) or key_down(KEY_RIGHT) and movetimer.elapsed>=movetime and key_up(KEY_LMENU) and key_up(KEY_RMENU) and key_up(KEY_G) or key_down(KEY_UP) and movetimer.elapsed>=movetime and key_up(KEY_LMENU) and key_up(KEY_RMENU) and key_up(KEY_G) or key_down(KEY_DOWN) and movetimer.elapsed>=movetime and key_up(KEY_LMENU) and key_up(KEY_RMENU) and key_up(KEY_G))
{
if(keyrowhold==1 and moveable==false and sitting==true)
{
if(rocksound==1) pool.play_stationary("sounds/misc/bodymove"+random(1,5)+".ogg",false);
movetimer.restart();
}
}
if (key_down(KEY_LEFT) and key_up(KEY_LMENU) and key_up(KEY_RMENU) and key_up(KEY_G))
{
if(degrees==0 and direction=="north")
{
move_left();
}
else if(degrees==180 and direction=="south")
{
move_right();
}
else if(degrees==90 and direction=="east")
{
move_backward();
}
else if(degrees==270 and direction=="west")
{
move_forward();
}
}
if (key_down(KEY_RIGHT) and key_up(KEY_LMENU) and key_up(KEY_RMENU) and key_up(KEY_G))
{
if(degrees==0 and direction=="north")
{
move_right();
}
else if(degrees==180 and direction=="south")
{
move_left();
}
else if(degrees==90 and direction=="east")
{
move_forward();
}
else if(degrees==270 and direction=="west")
{
move_backward();
}
}
if(key_down(KEY_DOWN) and key_up(KEY_LMENU) and key_up(KEY_RMENU) and key_up(KEY_G))
{
if(degrees==0 and direction=="north")
{
move_backward();
}
else if(degrees==180 and direction=="south")
{
move_forward();
}
else if(degrees==90 and direction=="east")
{
move_left();
}
else if(degrees==270 and direction=="west")
{
move_right();
}
}
if(key_down(KEY_UP) and key_up(KEY_LMENU) and key_up(KEY_RMENU) and key_up(KEY_G))
{
if(degrees==0 and direction=="north")
{
move_forward();
}
else if(degrees==180 and direction=="south")
{
move_backward();
}
else if(degrees==90 and direction=="east")
{
move_right();
}
else if(degrees==270 and direction=="west")
{
move_left();
}
}
if(key_pressed(KEY_LEFT) and key_up(KEY_LMENU) and key_up(KEY_RMENU) and key_up(KEY_G))
{
if(degrees==0 and direction=="north")
{
step_left();
}
else if(degrees==180 and direction=="south")
{
step_right();
}
else if(degrees==90 and direction=="east")
{
step_backward();
}
else if(degrees==270 and direction=="west")
{
step_forward();
}
}
if(key_pressed(KEY_RIGHT) and key_up(KEY_LMENU) and key_up(KEY_RMENU) and key_up(KEY_G))
{
if(degrees==0 and direction=="north")
{
step_right();
}
else if(degrees==180 and direction=="south")
{
step_left();
}
else if(degrees==90 and direction=="east")
{
step_forward();
}
else if(degrees==270 and direction=="west")
{
step_backward();
}
}
if(key_pressed(KEY_DOWN) and key_up(KEY_LMENU) and key_up(KEY_RMENU) and key_up(KEY_G))
{
if(degrees==0 and direction=="north")
{
step_backward();
}
else if(degrees==180 and direction=="south")
{
step_forward();
}
else if(degrees==90 and direction=="east")
{
step_left();
}
else if(degrees==270 and direction=="west")
{
step_right();
}
}
if(key_pressed(KEY_UP) and key_up(KEY_LMENU) and key_up(KEY_RMENU) and key_up(KEY_G))
{
if(degrees==0 and direction=="north")
{
step_forward();
}
else if(degrees==180 and direction=="south")
{
step_backward();
}
else if(degrees==90 and direction=="east")
{
step_right();
}
else if(degrees==270 and direction=="west")
{
step_left();
}
}
if(cameraminx<=0)
{
cameraminx=0;
}
if(cameraminy<=0)
{
cameraminy=0;
}
if(cameraminz<=0)
{
cameraminz=0;
}
if(minx<=0)
{
minx=0;
}
if(miny<=0)
{
miny=0;
}
if(minz<=0)
{
minz=0;
}
if(modspeed>=1)
{
camtime=250/modspeed;
runtime=500/modspeed;
turntime=750/modspeed;
walktime=1000/modspeed;
}
if(key_pressed(KEY_EQUALS) and modspeed!=20)
{
if(keyrowhold==0)
{
speak("You must enable auto walking in order to increase the moving speed.");
}
else if(speedable==true)
{
modspeed+=1;
speak("speed"+modspeed);
}
}
if(key_pressed(KEY_MINUS) and modspeed!=1)
{
if(keyrowhold==0)
{
speak("You must enable auto walking in order to decrease the moving speed.");
}
else if(speedable==true)
{
modspeed-=1;
speak("speed"+modspeed);
}
}
if(key_pressed(KEY_BACK))
{
if(modspeed==4)
{
speak("moving speed is already reset");
}
else if(modspeed<=20)
{
modspeed=4;
speak("moving speed reset");
}
}
if(key_pressed(KEY_U))
{
if(spokenswitch==1)
{
if(keyrowhold==1 and speedable==true)
{
if(switchsound==1) pool.play_stationary("sounds/misc/switchoff.ogg",false);
speak("auto walking disabled");
keyrowhold=0;
speedable=false;
}
else if(keyrowhold==0 and speedable==false)
{
if(switchsound==1) pool.play_stationary("sounds/misc/switchon.ogg",false);
speak("auto walking enabled");
keyrowhold=1;
speedable=true;
}
else if(spokenswitch==0)
{
if(keyrowhold==1 and speedable==true)
{
if(switchsound==1) pool.play_stationary("sounds/misc/switchoff.ogg",false);
keyrowhold=0;
speedable=false;
}
else if(keyrowhold==0 and speedable==false)
{
if(switchsound==1) pool.play_stationary("sounds/misc/switchon.ogg",false);
keyrowhold=1;
speedable=true;
}
}
}
}
if(key_pressed(KEY_R) and stuntimer.elapsed>=stuntime)
{
if(keyrowhold==1)
{
if(cammable==true and jumpable==true and moveable==true and turnable==true and sitting==false)
{
if(sitsound==1) pool.play_stationary("sounds/misc/sit.ogg",false);
wait(500);
if(tilename!="hardland")
{
string [] tilers1=find_files("sounds/objects/platforms/"+platile1+"/*hardland*");
tilename=tilers1[random(0,tilers1.length()-1)];
if(platatile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile1+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers2=find_files("sounds/objects/platforms/"+platile2+"/*hardland*");
tilename=tilers2[random(0,tilers2.length()-1)];
if(platbtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile2+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers3=find_files("sounds/objects/platforms/"+platile3+"/*hardland*");
tilename=tilers3[random(0,tilers3.length()-1)];
if(platctile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile3+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers4=find_files("sounds/objects/platforms/"+platile4+"/*hardland*");
tilename=tilers4[random(0,tilers4.length()-1)];
if(platdtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile4+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers5=find_files("sounds/objects/platforms/"+platile5+"/*hardland*");
tilename=tilers5[random(0,tilers5.length()-1)];
if(platetile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile5+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers6=find_files("sounds/objects/platforms/"+platile6+"/*hardland*");
tilename=tilers6[random(0,tilers6.length()-1)];
if(platftile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile6+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers7=find_files("sounds/objects/platforms/"+platile7+"/*hardland*");
tilename=tilers7[random(0,tilers7.length()-1)];
if(platgtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile7+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers8=find_files("sounds/objects/platforms/"+platile8+"/*hardland*");
tilename=tilers8[random(0,tilers8.length()-1)];
if(plathtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile8+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers9=find_files("sounds/objects/platforms/"+platile9+"/*hardland*");
tilename=tilers9[random(0,tilers9.length()-1)];
if(platitile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile9+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
cammable=false;
jumpable=false;
moveable=false;
turnable=false;
sitting=true;
stuntimer.restart();
}
}
else
{
if(standsound==1) pool.play_stationary("sounds/misc/stand.ogg",false);
cammable=true;
jumpable=true;
moveable=true;
turnable=true;
sitting=false;
stuntimer.restart();
}
}
else if(keyrowhold==0)
{
if(jumpable==true and moveable==true and sitting==false)
{
if(sitsound==1) pool.play_stationary("sounds/misc/sit.ogg",false);
wait(500);
if(tilename!="hardland")
{
string [] tilers1=find_files("sounds/objects/platforms/"+platile1+"/*hardland*");
tilename=tilers1[random(0,tilers1.length()-1)];
if(platatile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile1+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers2=find_files("sounds/objects/platforms/"+platile2+"/*hardland*");
tilename=tilers2[random(0,tilers2.length()-1)];
if(platbtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile2+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers3=find_files("sounds/objects/platforms/"+platile3+"/*hardland*");
tilename=tilers3[random(0,tilers3.length()-1)];
if(platctile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile3+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers4=find_files("sounds/objects/platforms/"+platile4+"/*hardland*");
tilename=tilers4[random(0,tilers4.length()-1)];
if(platdtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile4+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers5=find_files("sounds/objects/platforms/"+platile5+"/*hardland*");
tilename=tilers5[random(0,tilers5.length()-1)];
if(platetile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile5+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers6=find_files("sounds/objects/platforms/"+platile6+"/*hardland*");
tilename=tilers6[random(0,tilers6.length()-1)];
if(platftile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile6+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers7=find_files("sounds/objects/platforms/"+platile7+"/*hardland*");
tilename=tilers7[random(0,tilers7.length()-1)];
if(platgtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile7+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers8=find_files("sounds/objects/platforms/"+platile8+"/*hardland*");
tilename=tilers8[random(0,tilers8.length()-1)];
if(plathtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile8+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers9=find_files("sounds/objects/platforms/"+platile9+"/*hardland*");
tilename=tilers9[random(0,tilers9.length()-1)];
if(platitile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile9+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
jumpable=false;
moveable=false;
sitting=true;
stuntimer.restart();
}
}
else
{
if(standsound==1) pool.play_stationary("sounds/misc/stand.ogg",false);
jumpable=true;
moveable=true;
sitting=false;
stuntimer.restart();
}
}
}
if (key_pressed(KEY_X))
{
if(locspeech==1 and minz>=1)
{
speak("in the air,"+"facing;"+direction);
}
if(locspeech==1 and minz==0)
{
speak("on;"+platile1+","+"facing;"+direction);
}
if(locspeech==2)
{
speak(minx+",;"+miny+",;"+minz+","+"facing;"+direction);
}
if(locspeech==3 and minz>=1)
{
speak(minx+",;"+miny+",;"+minz+";"+"in the air,"+"facing;"+direction);
}
if(locspeech==3 and minz==0)
{
speak(minx+",;"+miny+",;"+minz+"on;"+platile1+","+"facing;"+direction);
}
if(locspeech==4 and minz>=1)
{
speak("current location,"+minx+",;"+miny+",;"+minz+","+"you are currently in the air,"+"facing;"+direction);
}
if(locspeech==4 and minz==0)
{
speak("current location,"+minx+",;"+miny+",;"+minz+","+"you are walking on;"+platile1+","+"facing;"+direction);
}
}
if(key_pressed(KEY_LBRACKET))
{
if(moveable==false and sitting==true)
{
speak("You must be standing in order to move to a random x position.");
}
else if(moveable==true and sitting==false)
{
if(spokentel==1)
{
minx=random(0,maxx);
if(telsound==1) pool.play_stationary("sounds/misc/tel2.ogg",false);
speak("moved to"+minx+",;"+miny+",;"+minz);
}
else if(spokentel==0)
{
minx=random(0,maxx);
if(telsound==1) pool.play_stationary("sounds/misc/tel2.ogg",false);
}
}
}
if(key_pressed(KEY_RBRACKET))
{
if(moveable==false and sitting==true)
{
speak("You must be standing in order to move to a random y position.");
}
else if(moveable==true and sitting==false)
{
if(spokentel==1)
{
miny=random(0,maxy);
if(telsound==1) pool.play_stationary("sounds/misc/tel3.ogg",false);
speak("moved to"+minx+",;"+miny+",;"+minz);
}
else if(spokentel==0)
{
miny=random(0,maxy);
if(telsound==1) pool.play_stationary("sounds/misc/tel3.ogg",false);
}
}
}
if(key_pressed(KEY_BACKSLASH))
{
if(moveable==false and sitting==true)
{
speak("You must be standing in order to move to a random x and y position.");
}
else if(moveable==true and sitting==false)
{
if(spokentel==1)
{
minx=random(0,maxx);
miny=random(0,maxy);
if(telsound==1) pool.play_stationary("sounds/misc/tel1.ogg",false);
speak("moved to"+minx+",;"+miny+",;"+minz);
}
else if(spokentel==0)
{
minx=random(0,maxx);
miny=random(0,maxy);
if(telsound==1) pool.play_stationary("sounds/misc/tel1.ogg",false);
}
}
}
if(key_pressed(KEY_F2) and maxx!=10000)
{
maxx+=10;
speak("max x position increased to"+maxx+"tiles");
}
if (key_pressed(KEY_F1) and maxx!=10)
{
maxx-=10;
speak("max x position decreased to"+maxx+"tiles");
}
if(minx>maxx)
{
minx-=10;
}
if(key_pressed(KEY_F4) and maxy!=10000)
{
maxy+=10;
speak("max y position increased to"+maxy+"tiles");
}
if(key_pressed(KEY_F3) and maxy!=10)
{
maxy-=10;
speak("max y position decreased to"+maxy+"tiles");
}
if(miny>maxy)
{
miny-=10;
}
if(key_pressed(KEY_F6) and maxz!=10000)
{
maxz+=10;
speak("max z position increased to"+maxz+"tiles");
}
if(key_pressed(KEY_F5) and maxz!=10)
{
maxz-=10;
speak("max z position decreased to"+maxz+"tiles");
}
if(minz>maxz)
{
minz-=10;
}
if(key_pressed(KEY_F8) and jumpheight!=100)
{
jumpheight+=1;
speak("jump height increased to"+jumpheight+"squares");
}
if(key_pressed(KEY_F7) and jumpheight!=1)
{
jumpheight-=1;
speak("jump height decreased to"+jumpheight+"squares");
}
if(key_pressed(KEY_COMMA))
{
speak("Your maximum x position is"+maxx+"tiles");
}
if(key_pressed(KEY_PERIOD))
{
speak("Your maximum y position is"+maxy+"tiles");
}
if(key_pressed(KEY_SLASH))
{
speak("Your maximum z position is"+maxz+"tiles");
}
if(key_down(KEY_SPACE) and spacehold==1 and jumping==false and jumpable==true and landed==true and key_up(KEY_G))
{
landed=false;
jumping=true;
string[] jumpsfx=find_files("sounds/characters/jumps/"+jumptype+"/*jump*");
if(jumpsound==1) pool.play_stationary("sounds/characters/jumps/"+jumptype+"/"+jumpsfx[random(0,jumpsfx.length()-1)],false);
jumptimer.force(jumptime);
}
if(jumptimer.elapsed>=jumptime and jumping==true and landed==false and minz<jumpheight)
{
minz+=1;
jumptimer.restart();
}
if(minz>=jumpheight)
{
jumping=false;
}
if(jumptimer.elapsed>=jumptime and jumping==false and landed==false and minz>0)
{
minz-=1;
jumptimer.restart();
if(minz==0 and landed==false)
{
landed=true;
jumping=false;
if(tilename!="land")
{
string [] tilers1=find_files("sounds/objects/platforms/"+platile1+"/*land*");
for (uint i=0; i<tilers1.length(); i++)
{
if(string_contains(tilers1[i],"hard",1)>-1)
tilers1.remove_at(i);
}
tilename=tilers1[random(0,tilers1.length()-1)];
if(platatile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile1+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers2=find_files("sounds/objects/platforms/"+platile2+"/*land*");
for (uint i=0; i<tilers2.length(); i++)
{
if(string_contains(tilers2[i],"hard",1)>-1)
tilers2.remove_at(i);
}
tilename=tilers2[random(0,tilers2.length()-1)];
if(platbtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile2+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers3=find_files("sounds/objects/platforms/"+platile3+"/*land*");
for (uint i=0; i<tilers3.length(); i++)
{
if(string_contains(tilers3[i],"hard",1)>-1)
tilers3.remove_at(i);
}
tilename=tilers3[random(0,tilers3.length()-1)];
if(platctile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile3+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers4=find_files("sounds/objects/platforms/"+platile4+"/*land*");
for (uint i=0; i<tilers4.length(); i++)
{
if(string_contains(tilers4[i],"hard",1)>-1)
tilers4.remove_at(i);
}
tilename=tilers4[random(0,tilers4.length()-1)];
if(platdtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile4+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers5=find_files("sounds/objects/platforms/"+platile5+"/*land*");
for (uint i=0; i<tilers5.length(); i++)
{
if(string_contains(tilers5[i],"hard",1)>-1)
tilers5.remove_at(i);
}
tilename=tilers5[random(0,tilers5.length()-1)];
if(platetile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile5+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers6=find_files("sounds/objects/platforms/"+platile6+"/*land*");
for (uint i=0; i<tilers6.length(); i++)
{
if(string_contains(tilers6[i],"hard",1)>-1)
tilers6.remove_at(i);
}
tilename=tilers6[random(0,tilers6.length()-1)];
if(platftile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile6+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers7=find_files("sounds/objects/platforms/"+platile7+"/*land*");
for (uint i=0; i<tilers7.length(); i++)
{
if(string_contains(tilers7[i],"hard",1)>-1)
tilers7.remove_at(i);
}
tilename=tilers7[random(0,tilers7.length()-1)];
if(platgtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile7+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers8=find_files("sounds/objects/platforms/"+platile8+"/*land*");
for (uint i=0; i<tilers8.length(); i++)
{
if(string_contains(tilers8[i],"hard",1)>-1)
tilers8.remove_at(i);
}
tilename=tilers8[random(0,tilers8.length()-1)];
if(plathtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile8+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers9=find_files("sounds/objects/platforms/"+platile9+"/*land*");
for (uint i=0; i<tilers9.length(); i++)
{
if(string_contains(tilers9[i],"hard",1)>-1)
tilers9.remove_at(i);
}
tilename=tilers9[random(0,tilers9.length()-1)];
if(platitile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile9+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
}
}
if(key_pressed(KEY_SPACE) and spacehold==0 and jumping==false and jumpable==true and landed==true)
{
landed=false;
jumping=true;
string[] jumpsfx=find_files("sounds/characters/jumps/"+jumptype+"/*jump*");
if(jumpsound==1) pool.play_stationary("sounds/characters/jumps/"+jumptype+"/"+jumpsfx[random(0,jumpsfx.length()-1)],false);
jumptimer.force(jumptime);
}
if(jumptimer.elapsed>=jumptime and jumping==true and landed==false and minz<jumpheight)
{
minz+=1;
jumptimer.restart();
}
if(minz>=jumpheight)
{
jumping=false;
}
if(jumptimer.elapsed>=jumptime and jumping==false and landed==false and minz>0)
{
minz-=1;
jumptimer.restart();
if(minz==0 and landed==false)
{
landed=true;
jumping=false;
if(tilename!="land")
{
string [] tilers1=find_files("sounds/objects/platforms/"+platile1+"/*land*");
for (uint i=0; i<tilers1.length(); i++)
{
if(string_contains(tilers1[i],"hard",1)>-1)
tilers1.remove_at(i);
}
tilename=tilers1[random(0,tilers1.length()-1)];
if(platatile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile1+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers2=find_files("sounds/objects/platforms/"+platile2+"/*land*");
for (uint i=0; i<tilers2.length(); i++)
{
if(string_contains(tilers2[i],"hard",1)>-1)
tilers2.remove_at(i);
}
tilename=tilers2[random(0,tilers2.length()-1)];
if(platbtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile2+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers3=find_files("sounds/objects/platforms/"+platile3+"/*land*");
for (uint i=0; i<tilers3.length(); i++)
{
if(string_contains(tilers3[i],"hard",1)>-1)
tilers3.remove_at(i);
}
tilename=tilers3[random(0,tilers3.length()-1)];
if(platctile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile3+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers4=find_files("sounds/objects/platforms/"+platile4+"/*land*");
for (uint i=0; i<tilers4.length(); i++)
{
if(string_contains(tilers4[i],"hard",1)>-1)
tilers4.remove_at(i);
}
tilename=tilers4[random(0,tilers4.length()-1)];
if(platdtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile4+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers5=find_files("sounds/objects/platforms/"+platile5+"/*land*");
for (uint i=0; i<tilers5.length(); i++)
{
if(string_contains(tilers5[i],"hard",1)>-1)
tilers5.remove_at(i);
}
tilename=tilers5[random(0,tilers5.length()-1)];
if(platetile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile5+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers6=find_files("sounds/objects/platforms/"+platile6+"/*land*");
for (uint i=0; i<tilers6.length(); i++)
{
if(string_contains(tilers6[i],"hard",1)>-1)
tilers6.remove_at(i);
}
tilename=tilers6[random(0,tilers6.length()-1)];
if(platftile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile6+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers7=find_files("sounds/objects/platforms/"+platile7+"/*land*");
for (uint i=0; i<tilers7.length(); i++)
{
if(string_contains(tilers7[i],"hard",1)>-1)
tilers7.remove_at(i);
}
tilename=tilers7[random(0,tilers7.length()-1)];
if(platgtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile7+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers8=find_files("sounds/objects/platforms/"+platile8+"/*land*");
for (uint i=0; i<tilers8.length(); i++)
{
if(string_contains(tilers8[i],"hard",1)>-1)
tilers8.remove_at(i);
}
tilename=tilers8[random(0,tilers8.length()-1)];
if(plathtile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile8+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
string [] tilers9=find_files("sounds/objects/platforms/"+platile9+"/*land*");
for (uint i=0; i<tilers9.length(); i++)
{
if(string_contains(tilers9[i],"hard",1)>-1)
tilers9.remove_at(i);
}
tilename=tilers9[random(0,tilers9.length()-1)];
if(platitile==1) platslot=pool.play_stationary("sounds/objects/platforms/"+platile9+"/"+tilename,false);
pool.update_sound_start_values(platslot,tilepan,tilevolume,tilepitch);
}
}
}
if(key_pressed(KEY_ESCAPE))
{
m.stop_music();
m.music.volume=0;
gamemenu();
}
if(shift_is_down()==false)
{
if(key_pressed(KEY_TAB))
{
if(moveable==false and sitting==true)
{
speak("You must be standing in order to change the tile you walk on.");
}
else if(moveable==true and sitting==false)
{
if(platbtile==1||platctile==1||platdtile==1||platetile==1||platftile==1||platgtile==1||plathtile==1||platitile==1)
{
speak("You can't change the tile when multiple slots are in use.");
}
else if(platbtile==0||platctile==0||platdtile==0||platetile==0||platftile==0||platgtile==0||plathtile==0||platitile==0)
{
if(spokentile==1)
{
platile1=get_new_tile(platile1,2);
if(tilesound==1) pool.play_stationary("sounds/misc/tilechange.wav",false);
speak(platile1);
}
else if(spokentile==0)
{
platile1=get_new_tile(platile1,2);
if(tilesound==1) pool.play_stationary("sounds/misc/tilechange.wav",false);
}
}
}
}
}
if(shift_is_down()==true)
{
if(key_pressed(KEY_TAB))
{
if(moveable==false and sitting==true)
{
speak("You must be standing in order to change the tile you walk on.");
}
else if(moveable==true and sitting==false)
{
if(platbtile==1||platctile==1||platdtile==1||platetile==1||platftile==1||platgtile==1||plathtile==1||platitile==1)
{
speak("You can't change the tile when multiple slots are in use.");
}
else if(platbtile==0||platctile==0||platdtile==0||platetile==0||platftile==0||platgtile==0||plathtile==0||platitile==0)
{
if(spokentile==1)
{
platile1=get_new_tile(platile1,1);
if(tilesound==1) pool.play_stationary("sounds/misc/tilechange.wav",false);
speak(platile1);
}
else if(spokentile==0)
{
platile1=get_new_tile(platile1,1);
if(tilesound==1) pool.play_stationary("sounds/misc/tilechange.wav",false);
}
}
}
}
}
if(shift_is_down()==false)
{
if(key_pressed(KEY_RETURN))
{
if(moveable==false and sitting==true)
{
speak("You must be standing in order to change the wall you bump in to.");
}
else if(moveable==true and sitting==false)
{
if(platbtile==1||platctile==1||platdtile==1||platetile==1||platftile==1||platgtile==1||plathtile==1||platitile==1)
{
speak("You can't change the wall when multiple slots are in use.");
}
else if(platbtile==0||platctile==0||platdtile==0||platetile==0||platftile==0||platgtile==0||plathtile==0||platitile==0)
{
if(spokenwall==1)
{
walltile1=get_new_wall(walltile1,2);
if(wallsound==1) pool.play_stationary("sounds/misc/wallchange.ogg",false);
speak("wall"+walltile1);
}
else if(spokenwall==0)
{
walltile1=get_new_wall(walltile1,2);
if(wallsound==1) pool.play_stationary("sounds/misc/wallchange.ogg",false);
}
}
}
}
}
if(shift_is_down()==true)
{
if(key_pressed(KEY_RETURN))
{
if(moveable==false and sitting==true)
{
speak("You must be standing in order to change the wall you bump in to.");
}
else if(moveable==true and sitting==false)
{
if(platbtile==1||platctile==1||platdtile==1||platetile==1||platftile==1||platgtile==1||plathtile==1||platitile==1)
{
speak("You can't change the wall when multiple slots are in use.");
}
else if(platbtile==0||platctile==0||platdtile==0||platetile==0||platftile==0||platgtile==0||plathtile==0||platitile==0)
{
if(spokenwall==1)
{
walltile1=get_new_wall(walltile1,1);
if(wallsound==1) pool.play_stationary("sounds/misc/wallchange.ogg",false);
speak("wall"+walltile1);
}
else if(spokenwall==0)
{
walltile1=get_new_wall(walltile1,1);
if(wallsound==1) pool.play_stationary("sounds/misc/wallchange.ogg",false);
}
}
}
}
}
}
}
bool shift_is_down()
{
if(key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
return true;
}
return false;
}
